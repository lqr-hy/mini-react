(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ElEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	// ReactElement
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ElEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mask: 'lqr'
	    };
	    return element;
	};
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            //处理传入的是不是key
	            if (val !== undefined) {
	                key = '' + val;
	                continue;
	            }
	        }
	        if (prop === 'ref') {
	            // 处理传入的r ef
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        // 判断是自己的props 还是原型的props
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    const maybeChildrenLength = maybeChildren.length;
	    if (maybeChildrenLength) {
	        if (maybeChildrenLength === 1) {
	            // 只有一个child child
	            props.children = maybeChildren[0];
	        }
	        else {
	            // 多个child [child, child]
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	var index = {
	    version: '0.0.0',
	    createElement: jsx
	};

	return index;

}));
